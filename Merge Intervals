1. C++:
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool sortHelp(const Interval &a, const Interval &b)
{
    return (a.start<b.start);
}
vector<Interval> Solution::insert(vector<Interval> &intervals, Interval newInterval) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

 
    vector<Interval>A;
    vector<Interval>res;
    A=intervals;
    A.push_back(newInterval);

    sort(A.begin(),A.end(),sortHelp);
      int n=A.size();
    if(n < 2) {
        return A;
    }
    int i;
    Interval t=A[0];
    for(i=1;i<A.size();i++)
    {
        Interval s=A[i];
        if(s.start<t.end)
            t.end=max(t.end,s.end);
        else
        {
            res.push_back(t);
            t=s;
        }
    }
    res.push_back(t);
    return res;
    
}
