1. C++:
vector<int> Solution::maxset(vector<int> &A) {
    int len = A.size();  
   long long maxSum = 0;  
   long long curSum = 0;  
   int startMax = -1;  
   int endMax = -1;  
   int start = 0;  
   int end = 0;  
   while(end < len) {  
    if(A[end] >= 0) {  
      curSum += (long long)A[end];  
      if(curSum > maxSum) {  
           maxSum = curSum;  
           startMax = start;  
           endMax = end + 1;  
      } else if(curSum == maxSum) {  
           if(end + 1 - start > endMax - startMax) {  
               startMax = start;  
              endMax = end + 1;  
           }  
      }  
    }else {  
      start = end + 1;  
      curSum = 0;  
    }  
    end++;  
   }  
   vector<int> ans;  
   ans.clear();  
   if(startMax == -1 || endMax == -1)  
     return ans;  
   for(int i = startMax; i < endMax; ++i)  
      ans.push_back(A[i]);  
   return ans;  
 }


2. Swift:
import Foundation

class Solution {
    func maxset(_ A: inout [Int]) -> [Int] {
        var result: [Int] = []
        
        var current: [Int] = []
        var maxSum: Int = -1
        var curSum: Int = 0
        for (i, a) in A.enumerated() {
            if a >= 0 {
                current.append(a)
                curSum += a
            }
            if a < 0 || i == A.count - 1 {
                if curSum > maxSum {
                    maxSum = curSum
                    result = current
                }
                current = []
                curSum = 0
            }
        }
        return result
    }
}
